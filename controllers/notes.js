export class NotesController {
    //constructor(db: Database) {
    constructor() {
        // this.db = db;
        // this.initializeDatabase();
    }
    initializeDatabase() {
        this.db.run(`
		CREATE TABLE IF NOT EXISTS Notes (
			id TEXT PRIMARY KEY,
			title TEXT,
			location TEXT,
			reviewed INTEGER,
			tracked INTEGER,
			bookmarked INTEGER,
			last_viewed DATETIME
		)
	`);
    }
    addNote(note) {
        const query = `
			INSERT INTO Notes (id, title, location, reviewed, tracked, bookmarked, last_reviewed)
			VALUES (?, ?, ?, ?, ?, ?, ?)
		`;
        const statement = this.db.prepare(query);
        statement.run();
        statement.free();
    }
    getNotes() {
        const query = `SELECT * FROM Notes`;
        const statement = this.db.prepare(query);
        const result = [];
        while (statement.step()) {
            const row = statement.getAsObject();
            const note = {
                id: row.id,
                title: row.title,
                location: row.location,
                reviewed: row.reviewed,
                tracked: row.tracked,
                bookmarked: row.bookmarked,
                last_reviewed: row.last_reviewed
            };
            result.push(note);
        }
        statement.free();
        return result;
    }
    updateNote(note) {
        const query = `
			UPDATE Notes
			SET title = ?, location = ?, reviewed = ?, tracked = ?, bookmarked = ?, last_reviewed = ?
			WHERE id = ?
		`;
        const statement = this.db.prepare(query);
        statement.bind([note.title, note.location, note.reviewed, note.tracked, note.bookmarked, note.last_reviewed, note.id]);
        statement.run();
        statement.free();
    }
    deleteNoteById(id) {
        const query = `DELETE FROM Notes where id = ?`;
        const statement = this.db.prepare(query);
        statement.run();
        statement.free();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90ZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJub3Rlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFhQSxNQUFNLE9BQU8sZUFBZTtJQUczQiw2QkFBNkI7SUFDN0I7UUFDQyxnQkFBZ0I7UUFDaEIsNkJBQTZCO0lBQzlCLENBQUM7SUFFTyxrQkFBa0I7UUFDekIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7Ozs7Ozs7Ozs7RUFVWixDQUFDLENBQUM7SUFDSCxDQUFDO0lBRUQsT0FBTyxDQUFDLElBQVU7UUFDakIsTUFBTSxLQUFLLEdBQUc7OztHQUdiLENBQUE7UUFDRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUN4QyxTQUFTLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDaEIsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxRQUFRO1FBQ1AsTUFBTSxLQUFLLEdBQUcscUJBQXFCLENBQUM7UUFDcEMsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekMsTUFBTSxNQUFNLEdBQVcsRUFBRSxDQUFDO1FBQzFCLE9BQU8sU0FBUyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ3hCLE1BQU0sR0FBRyxHQUFHLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUVwQyxNQUFNLElBQUksR0FBUztnQkFDbEIsRUFBRSxFQUFFLEdBQUcsQ0FBQyxFQUFZO2dCQUNwQixLQUFLLEVBQUUsR0FBRyxDQUFDLEtBQWU7Z0JBQzFCLFFBQVEsRUFBRSxHQUFHLENBQUMsUUFBa0I7Z0JBQ2hDLFFBQVEsRUFBRSxHQUFHLENBQUMsUUFBa0I7Z0JBQ2hDLE9BQU8sRUFBRSxHQUFHLENBQUMsT0FBaUI7Z0JBQzlCLFVBQVUsRUFBRSxHQUFHLENBQUMsVUFBb0I7Z0JBQ3BDLGFBQWEsRUFBRSxHQUFHLENBQUMsYUFBdUI7YUFDMUMsQ0FBQTtZQUNELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbEI7UUFDRCxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDakIsT0FBTyxNQUFNLENBQUM7SUFDZixDQUFDO0lBRUQsVUFBVSxDQUFDLElBQVU7UUFDcEIsTUFBTSxLQUFLLEdBQUc7Ozs7R0FJYixDQUFDO1FBQ0YsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFekMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQ3RILFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoQixTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDbEIsQ0FBQztJQUVELGNBQWMsQ0FBQyxFQUFVO1FBQ3hCLE1BQU0sS0FBSyxHQUFHLGdDQUFnQyxDQUFDO1FBQy9DLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXpDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUNoQixTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDbEIsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBEYXRhYmFzZSB9IGZyb20gXCJzcWwuanNcIjtcblxuZXhwb3J0IGludGVyZmFjZSBOb3RlIHtcblx0aWQ6IHN0cmluZztcblx0dGl0bGU6IHN0cmluZztcblx0bG9jYXRpb246IHN0cmluZztcblx0cmV2aWV3ZWQ6IG51bWJlcjtcblx0dHJhY2tlZDogbnVtYmVyO1xuXHRib29rbWFya2VkOiBudW1iZXI7XG5cdGxhc3RfcmV2aWV3ZWQ6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIE5vdGVzQ29udHJvbGxlciB7XG5cdHByaXZhdGUgZGI6IERhdGFiYXNlO1xuXG5cdC8vY29uc3RydWN0b3IoZGI6IERhdGFiYXNlKSB7XG5cdGNvbnN0cnVjdG9yKCkge1xuXHRcdC8vIHRoaXMuZGIgPSBkYjtcblx0XHQvLyB0aGlzLmluaXRpYWxpemVEYXRhYmFzZSgpO1xuXHR9XG5cblx0cHJpdmF0ZSBpbml0aWFsaXplRGF0YWJhc2UoKSB7XG5cdFx0dGhpcy5kYi5ydW4oYFxuXHRcdENSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTIE5vdGVzIChcblx0XHRcdGlkIFRFWFQgUFJJTUFSWSBLRVksXG5cdFx0XHR0aXRsZSBURVhULFxuXHRcdFx0bG9jYXRpb24gVEVYVCxcblx0XHRcdHJldmlld2VkIElOVEVHRVIsXG5cdFx0XHR0cmFja2VkIElOVEVHRVIsXG5cdFx0XHRib29rbWFya2VkIElOVEVHRVIsXG5cdFx0XHRsYXN0X3ZpZXdlZCBEQVRFVElNRVxuXHRcdClcblx0YCk7XG5cdH1cblxuXHRhZGROb3RlKG5vdGU6IE5vdGUpIHtcblx0XHRjb25zdCBxdWVyeSA9IGBcblx0XHRcdElOU0VSVCBJTlRPIE5vdGVzIChpZCwgdGl0bGUsIGxvY2F0aW9uLCByZXZpZXdlZCwgdHJhY2tlZCwgYm9va21hcmtlZCwgbGFzdF9yZXZpZXdlZClcblx0XHRcdFZBTFVFUyAoPywgPywgPywgPywgPywgPywgPylcblx0XHRgXG5cdFx0Y29uc3Qgc3RhdGVtZW50ID0gdGhpcy5kYi5wcmVwYXJlKHF1ZXJ5KVxuXHRcdHN0YXRlbWVudC5ydW4oKTtcblx0XHRzdGF0ZW1lbnQuZnJlZSgpO1xuXHR9XG5cblx0Z2V0Tm90ZXMoKTogTm90ZVtdIHtcblx0XHRjb25zdCBxdWVyeSA9IGBTRUxFQ1QgKiBGUk9NIE5vdGVzYDtcblx0XHRjb25zdCBzdGF0ZW1lbnQgPSB0aGlzLmRiLnByZXBhcmUocXVlcnkpO1xuXHRcdGNvbnN0IHJlc3VsdDogTm90ZVtdID0gW107XG5cdFx0d2hpbGUgKHN0YXRlbWVudC5zdGVwKCkpIHtcblx0XHRcdGNvbnN0IHJvdyA9IHN0YXRlbWVudC5nZXRBc09iamVjdCgpO1xuXG5cdFx0XHRjb25zdCBub3RlOiBOb3RlID0ge1xuXHRcdFx0XHRpZDogcm93LmlkIGFzIHN0cmluZyxcblx0XHRcdFx0dGl0bGU6IHJvdy50aXRsZSBhcyBzdHJpbmcsXG5cdFx0XHRcdGxvY2F0aW9uOiByb3cubG9jYXRpb24gYXMgc3RyaW5nLFxuXHRcdFx0XHRyZXZpZXdlZDogcm93LnJldmlld2VkIGFzIG51bWJlcixcblx0XHRcdFx0dHJhY2tlZDogcm93LnRyYWNrZWQgYXMgbnVtYmVyLFxuXHRcdFx0XHRib29rbWFya2VkOiByb3cuYm9va21hcmtlZCBhcyBudW1iZXIsXG5cdFx0XHRcdGxhc3RfcmV2aWV3ZWQ6IHJvdy5sYXN0X3Jldmlld2VkIGFzIHN0cmluZ1xuXHRcdFx0fVxuXHRcdFx0cmVzdWx0LnB1c2gobm90ZSk7XG5cdFx0fVxuXHRcdHN0YXRlbWVudC5mcmVlKCk7XG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdHVwZGF0ZU5vdGUobm90ZTogTm90ZSkge1xuXHRcdGNvbnN0IHF1ZXJ5ID0gYFxuXHRcdFx0VVBEQVRFIE5vdGVzXG5cdFx0XHRTRVQgdGl0bGUgPSA/LCBsb2NhdGlvbiA9ID8sIHJldmlld2VkID0gPywgdHJhY2tlZCA9ID8sIGJvb2ttYXJrZWQgPSA/LCBsYXN0X3Jldmlld2VkID0gP1xuXHRcdFx0V0hFUkUgaWQgPSA/XG5cdFx0YDtcblx0XHRjb25zdCBzdGF0ZW1lbnQgPSB0aGlzLmRiLnByZXBhcmUocXVlcnkpO1xuXG5cdFx0c3RhdGVtZW50LmJpbmQoW25vdGUudGl0bGUsIG5vdGUubG9jYXRpb24sIG5vdGUucmV2aWV3ZWQsIG5vdGUudHJhY2tlZCwgbm90ZS5ib29rbWFya2VkLCBub3RlLmxhc3RfcmV2aWV3ZWQsIG5vdGUuaWRdKVxuXHRcdHN0YXRlbWVudC5ydW4oKTtcblx0XHRzdGF0ZW1lbnQuZnJlZSgpO1xuXHR9XG5cblx0ZGVsZXRlTm90ZUJ5SWQoaWQ6IHN0cmluZykge1xuXHRcdGNvbnN0IHF1ZXJ5ID0gYERFTEVURSBGUk9NIE5vdGVzIHdoZXJlIGlkID0gP2A7XG5cdFx0Y29uc3Qgc3RhdGVtZW50ID0gdGhpcy5kYi5wcmVwYXJlKHF1ZXJ5KTtcblxuXHRcdHN0YXRlbWVudC5ydW4oKTtcblx0XHRzdGF0ZW1lbnQuZnJlZSgpO1xuXHR9XG59XG5cbiJdfQ==